#!/bin/bash
#
#
# 	SCSTTarget OCF RA. Exports and manages iSCSI SCST targets.
#
#   (c) 2012 Riccardo Bicelli
#                 and Linux-HA contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################

# Initialization:
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Set portal to none by default
OCF_RESKEY_portals_default="none"
: ${OCF_RESKEY_portals=${OCF_RESKEY_portals_default}}

# Lockfile, used for selecting a target ID
LOCKFILE=${HA_RSCTMP}/SCSTTarget-${OCF_RESKEY_implementation}.lock
SYSFS_PATH="/sys/kernel/scst_tgt/targets/iscsi"

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="SCSTTarget" version="0.1">
<version>0.1</version>

<longdesc lang="en">
Manages SCST iSCSI targets. An iSCSI target is a collection of SCSI Logical
Units (LUs) exported via a daemon that speaks the iSCSI protocol.
</longdesc>
<shortdesc lang="en">SCST iSCSI target export agent</shortdesc>

<parameters>

<parameter name="iqn" required="1" unique="1">
<longdesc lang="en">
The target iSCSI Qualified Name (IQN). Should follow the conventional
"iqn.yyyy-mm.&lt;reversed domain name&gt;[:identifier]" syntax.
</longdesc>
<shortdesc lang="en">iSCSI target IQN</shortdesc>
<content type="string" />
</parameter>

<parameter name="portals" required="0" unique="0">
<longdesc lang="en">
iSCSI network portal addresses. Not supported by all
implementations. If unset, the default is to create one portal that
listens on all IP addresses.
</longdesc>
<shortdesc lang="en">iSCSI portal addresses</shortdesc>
<content type="string" default="${OCF_RESKEY_portals_default}"/>
</parameter>

<parameter name="tgtoptions" required="0" unique="0">
<longdesc lang="en">
Additional target parameters. A space-separated list of "name=value"
pairs which will be passed through to the iSCSI daemon's management
interface. The supported parameters are implementation
dependent. Neither the name nor the value may contain whitespace.
</longdesc>
<shortdesc lang="en">List of iSCSI target parameters</shortdesc>
<content type="string" />
</parameter>

</parameters>

<actions>
<action name="start"        timeout="10" />
<action name="stop"         timeout="180" />
<action name="status "      timeout="10" interval="10" depth="0" />
<action name="monitor"      timeout="10" interval="10" depth="0" />
<action name="meta-data"    timeout="5" />
<action name="validate-all"   timeout="10" />
</actions>
</resource-agent>
END
}

sysfs_submit() {
    #echo "$1 -> $2" >> /scsttarget.log
    echo "$1" > $2
}

SCSTTarget_usage() {
	cat <<END
usage: $0 {start|stop|status|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

SCSTTarget_start() {
    SCSTTarget_monitor
    
    if [ $? = $OCF_SUCCESS ]; then
	return $OCF_SUCCESS
    fi
    
    sysfs_submit "add_target ${OCF_RESKEY_iqn}" "${SYSFS_PATH}/mgmt"
    
    for PORTAL in ${OCF_RESKEY_portals}; do
	sysfs_submit "add_target_attribute ${OCF_RESKEY_iqn} allowed_portal $PORTAL" "${SYSFS_PATH}/mgmt"
    done
    
    for OPTION in ${OCF_RESKEY_tgtoptions}; do
	ARR=( ${OPTION//[=\/]/ } )
	NAME=${ARR[0]}
	VALUE=${ARR[1]}
	
	sysfs_submit $VALUE "${SYSFS_PATH}/${OCF_RESKEY_iqn}/$NAME"
    done
    
    sysfs_submit "1" "${SYSFS_PATH}/${OCF_RESKEY_iqn}/enabled"
    
    return $OCF_SUCCESS
}

SCSTTarget_stop() {
    SCSTTarget_monitor
    
    if [ $? = $OCF_SUCCESS ]; then
	sysfs_submit "0" "${SYSFS_PATH}/${OCF_RESKEY_iqn}/enabled"
	
	for SESSION in `/bin/ls ${SYSFS_PATH}/${OCF_RESKEY_iqn}/sessions`; do
	    sysfs_submit "1" "${SYSFS_PATH}/${OCF_RESKEY_iqn}/sessions/${SESSION}/force_close"
	done
	
	sleep 1
	
	sysfs_submit "del_target ${OCF_RESKEY_iqn}" "${SYSFS_PATH}/mgmt"
    fi
    
    return $OCF_SUCCESS
}

SCSTTarget_monitor() {
	if [ -d "${SYSFS_PATH}/${OCF_RESKEY_iqn}" ]; then
		return $OCF_SUCCESS
	else
		return $OCF_NOT_RUNNING
	fi
}

SCSTTarget_validate() {
    # Do we have all required variables?
    local required_vars
    required_vars="iqn"
    
    for var in ${required_vars}; do
	param="OCF_RESKEY_${var}"
	
	if [ -z "${!param}" ]; then
	    ocf_log error "Missing resource parameter \"$var\"!"
	    exit $OCF_ERR_CONFIGURED
	fi
    done
    
    if ! ocf_is_probe; then
	if [ ! -d ${SYSFS_PATH} ]; then
	    ocf_log err "${SYSFS_PATH} does not exist or is not a directory -- check if required modules are loaded."
	    exit $OCF_ERR_INSTALLED
	fi
    fi
    
    return $OCF_SUCCESS
}

case $1 in
     meta-data)
	meta_data
	exit $OCF_SUCCESS
	;;
    
     usage|help)
	SCSTTarget_usage
	exit $OCF_SUCCESS
	;;
esac

# Everything except usage and meta-data must pass the validate test
SCSTTarget_validate

case $__OCF_ACTION in
    start)		SCSTTarget_start;;
    
    stop)		SCSTTarget_stop;;
    
    monitor|status)	SCSTTarget_monitor;;
    
    validate-all)	;;
    
    *)			SCSTTarget_usage
			exit $OCF_ERR_UNIMPLEMENTED
			;;
esac

rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"

exit $rc
